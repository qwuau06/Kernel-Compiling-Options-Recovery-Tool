#include <iostream>
#include <cstdlib>
#include <string>
#include <regex>
#include <cstdarg>

#include <elfio/elfio.hpp>
#include <r_socket.h>

using namespace std;

// read file name, open file
// read elf headers, get magic number
// connect to radare2, extract dissembled message
// get offset of specific struct
// 	probe function always have parameter of the struct
// 	struct device is always at the same offset of that struct so extract it from here
//

string config_options[]={
	"CONFIG_GENERIC_MSI_IRQ_DOMAIN",
	"CONFIG_PINCTRL",
	"CONFIG_NUMA",
	"CONFIG_DMA_CMA",
};

ELFIO::elfio reader;

bool Bitness32 = true;
bool Encodinglittle=false;

int Offset_of_node = 0;

string Probepattern = "(^|_)probe($|_)";
regex Proberegex;
smatch Match;

R2Pipe r2_msm;

string r2_cmds[]={
	"fs symbols;f~sym.i2c_new_device",
	"af @ sym.i2c_new_device",
	"pdf @ sym.i2c_new_device~"
};

static void r2cmd(R2Pipe* r2, const char* cmd){
	char* msg = r2pipe_cmd(r2, cmd);
	if(msg){
		cout<<msg<<endl;
		free(msg);
	}
}


void initELFIO(int argc, char** argv){
	Proberegex = regex(Probepattern);
	if(argc<3){
		cout<<"Usage: moduledep [module file name], [of_node offset]"<<endl;
		exit(1);
	}
	Offset_of_node = atoi(argv[2]);
	cout << "of_node offset is "<<Offset_of_node<<endl;
	if(!reader.load(argv[1])){
		cerr<< "Cannot find or process module file" <<endl;
		exit(1);
	}
}

int main(int argc, char** argv){
	initELFIO(argc,argv);

	if(reader.get_class()==ELFCLASS32) Bitness32=true;
	else Bitness32=false;

	if(reader.get_encoding() == ELFDATA2LSB) Encodinglittle=true;
	else Encodinglittle=false;

	// filter through all the sections
	ELFIO::Elf_Half sec_num = reader.sections.size();
	ELFIO::section* psec;
	for (int i=0; i<sec_num; i++){
		psec = reader.sections[i];
		// find the symbol table
		if(psec->get_type() == SHT_SYMTAB){
			const ELFIO::symbol_section_accessor symbols( reader, psec ); 
			cout <<"symtab found"<<endl;
			for ( unsigned int j = 0; j < symbols.get_symbols_num(); ++j ) {
				string name;
				ELFIO::Elf64_Addr value;
				ELFIO::Elf_Xword size;
				unsigned char bind,type;
				ELFIO::Elf_Half section_index;
				unsigned char other;
				symbols.get_symbol( j, name, value, size, bind, type, section_index, other ); 
				
				// find probe in function
				if(regex_search(name,Match,Proberegex)){
					cout<<"probe function spotted, full name "<<name<<endl;
				}
			}
		}
	}
}
